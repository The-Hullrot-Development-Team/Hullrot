using System.Numerics;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Implants.UI;

[GenerateTypedNameReferences]
public sealed partial class ChameleonControllerMenu : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    private readonly SpriteSystem _sprite;

    private IEnumerable<JobPrototype> _jobPrototypes = [];

    public event Action<ProtoId<JobPrototype>>? OnIdSelected;

    // List of all the job protos that you can select!

    public ChameleonControllerMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _sprite = _entityManager.System<SpriteSystem>();
    }

    public void UpdateState(IEnumerable<JobPrototype> jobs)
    {
        _jobPrototypes = jobs;
        UpdateGrid();
    }

    private void UpdateGrid()
    {
        Grid.RemoveAllChildren();

        foreach (var job in _jobPrototypes)
        {
            if (!_prototypeManager.TryIndex(job.Icon, out var jobIconProto))
                continue;

            var boxContainer = new BoxContainer();

            var button = new Button
            {
                HorizontalExpand = true,
                StyleClasses = {StyleBase.ButtonSquare},
                ToolTip = Loc.GetString(job.Name),
                Text = Loc.GetString(job.Name),
                Margin = new Thickness(0, 0, 15, 0),
            };

            var jobIconTexture = new TextureRect
            {
                Texture = _sprite.Frame0(jobIconProto.Icon),
                TextureScale = new Vector2(2.5f, 2.5f),
                Stretch = TextureRect.StretchMode.KeepCentered,
                Margin = new Thickness(0, 0, 5, 0),
            };

            boxContainer.AddChild(jobIconTexture);
            boxContainer.AddChild(button);

            button.OnPressed += _ => OnIdSelected?.Invoke(job);

            Grid.AddChild(boxContainer);
        }
    }
}
