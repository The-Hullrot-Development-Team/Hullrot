using System.Linq;
using System.Numerics;
using Content.Shared.Ghost;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.UserInterface.Systems.Ghost.Controls
{
    [GenerateTypedNameReferences]
    public sealed partial class GhostTargetWindow : DefaultWindow
    {
        private string _searchText = string.Empty;

        /// <summary>
        /// Dictionary where the key is the department, and the value is a list of warp data.
        /// </summary>
        private Dictionary<string, List<(string, NetEntity, Color)>> _categories = new();

        public event Action<NetEntity>? WarpClicked;
        public event Action? OnGhostnadoClicked;

        public GhostTargetWindow()
        {
            RobustXamlLoader.Load(this);
            SearchBar.OnTextChanged += OnSearchTextChanged;

            GhostnadoButton.OnPressed += _ => OnGhostnadoClicked?.Invoke();
        }

        /// <summary>
        /// Categorizes the warps based on departments.
        /// </summary>
        /// <param name="warps"></param>
        public void UpdateWarps(IEnumerable<GhostWarp> warps)
        {
            _categories.Clear();

            foreach (var warp in warps)
            {
                if (!_categories.ContainsKey(warp.CategoryName))
                {
                    _categories[warp.CategoryName] = new List<(string, NetEntity, Color)>();
                }

                var warpName = warp.IsWarpPoint
                    ? Loc.GetString("ghost-target-window-current-button", ("name", warp.DisplayName))
                    : warp.DisplayName;

                _categories[warp.CategoryName].Add((warpName, warp.Entity, warp.WarpColor));
            }
        }

        public void Populate()
        {
            ButtonContainer.DisposeAllChildren();
            AddButtons();
        }

        private void AddButtons()
        {
            foreach (var (categoryName, warps) in _categories)
            {
                if (warps.Count == 0)
                    continue;

                var categoryLabel = new Label
                {
                    Text = categoryName,
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Center,
                };

                ButtonContainer.AddChild(categoryLabel);

                foreach (var (name, warpTarget, colorHex) in warps)
                {
                    var currentButtonRef = new Button
                    {
                        Text = name,
                        TextAlign = Label.AlignMode.Right,
                        HorizontalAlignment = HAlignment.Center,
                        VerticalAlignment = VAlignment.Center,
                        SizeFlagsStretchRatio = 1,
                        ModulateSelfOverride = colorHex,
                        MinSize = new Vector2(340, 20),
                        ClipText = true,
                    };

                    currentButtonRef.OnMouseEntered += _ => currentButtonRef.Label.FontColorOverride = Color.InterpolateBetween(Color.White, colorHex, 0.35f);

                    currentButtonRef.OnMouseExited += _ =>
                    {
                        currentButtonRef.Modulate = Color.White;
                        currentButtonRef.Label.FontColorOverride = Color.White;
                    };

                    currentButtonRef.OnPressed += _ =>
                    {
                        WarpClicked?.Invoke(warpTarget);
                        currentButtonRef.Modulate = colorHex;
                    };
                    currentButtonRef.Visible = ButtonIsVisible(currentButtonRef);

                    ButtonContainer.AddChild(currentButtonRef);
                }
            }
        }

        private bool ButtonIsVisible(Button button)
        {
            return string.IsNullOrEmpty(_searchText) || button.Text == null || button.Text.Contains(_searchText, StringComparison.OrdinalIgnoreCase);
        }

        private void UpdateVisibleButtons()
        {
            foreach (var child in ButtonContainer.Children)
            {
                if (child is Button button)
                    button.Visible = ButtonIsVisible(button);
            }
        }

        private void OnSearchTextChanged(LineEdit.LineEditEventArgs args)
        {
            _searchText = args.Text;

            UpdateVisibleButtons();
            GhostScroll.SetScrollValue(Vector2.Zero);
        }
    }
}
