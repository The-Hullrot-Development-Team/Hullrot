using Content.Client.Message;
using Content.Client.UserInterface.Controls;
using Content.Shared.StationTeleporter;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Utility;
using Content.Client.Pinpointer.UI;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.StationTeleporter;

[GenerateTypedNameReferences]
public sealed partial class StationTeleporterConsoleWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    private readonly SpriteSystem _spriteSystem;
    private readonly SharedTransformSystem _xformSystem;

    public event Action<NetEntity?>? SendTeleporterLinkChangeAction;

    private NetEntity? _trackedEntity;
    private Texture? _ringTexture;
    private Texture? _ringFilledTexture;

    public StationTeleporterConsoleWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _spriteSystem = _entManager.System<SpriteSystem>();
        _xformSystem = _entManager.System<SharedTransformSystem>();

        NavMap.TrackedEntitySelectedAction += ClickTeleporterOnNavMap;
    }

    public void Set(StationTeleporterConsoleBoundUserInterface userInterface, string stationName, EntityUid? mapUid)
    {
        _ringTexture =
            _spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/ring.png")));
        _ringFilledTexture =
            _spriteSystem.Frame0(
                new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/ring_filled.png")));

        if (_entManager.TryGetComponent<TransformComponent>(mapUid, out var xform))
            NavMap.MapUid = xform.GridUid;
        else
            NavMap.Visible = false;

        StationName.AddStyleClass("LabelBig");
        StationName.Text = stationName;
        NavMap.ForceNavMapUpdate();

        SendTeleporterLinkChangeAction += userInterface.SendTeleporterLinkChangeMessage;
    }

    public void ShowTeleporters(StationTeleporterState state, EntityUid monitor, EntityCoordinates? monitorCoords)
    {
        ClearOutDatedData();

        var teleporters = state.Teleporters;

        //No teleporters
        if (teleporters.Count == 0)
        {
            NoTeleportersLabel.Visible = true;
            return;
        }

        NoTeleportersLabel.Visible = false;


        // Show all teleporters
        foreach (var teleporter in teleporters)
        {
            var coordinates = _entManager.GetCoordinates(teleporter.Coordinates);

            var selected = teleporter.TeleporterUid == state.SelectedTeleporter;
            var linked = teleporter.LinkCoordinates is not null;

            var bgColor = linked ? new Color(18, 61, 82) : new Color(30, 30, 34);
            if (selected)
                bgColor = new Color(49, 117, 7);


            // Primary container to hold the button UI elements
            var panelContainer = new PanelContainer()
            {
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                HorizontalExpand = true,
                Margin = new Thickness(10),
                PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = bgColor,
                    BorderColor = Color.Black,
                    BorderThickness = new(2),
                },
            };

            TeleportersTable.AddChild(panelContainer);

            var mainBox = new BoxContainer()
            {
                Orientation = LayoutOrientation.Vertical,
                HorizontalExpand = true,
            };

            panelContainer.AddChild(mainBox);


            // Teleporter name
            var nameLabel = new RichTextLabel()
            {
                HorizontalExpand = true,
                HorizontalAlignment = HAlignment.Center,
                Margin = new Thickness(0, 5),
            };
            nameLabel.SetMarkup($"[bold]{teleporter.Name}[/bold]");

            mainBox.AddChild(nameLabel);


            //Left subpart
            var leftBox = new BoxContainer()
            {
                SetWidth = 30,
                Orientation = LayoutOrientation.Vertical,
                HorizontalExpand = true,
            };

            mainBox.AddChild(leftBox);


            //Right subpart
            var rightBox = new BoxContainer()
            {
                Orientation = LayoutOrientation.Vertical,
                HorizontalExpand = true,
            };

            mainBox.AddChild(rightBox);


            // Locating button
            var locateButton = new TeleporterButton()
            {
                Text = Loc.GetString("teleporter-console-user-interface-locate"),
                TeleporterUid = teleporter.TeleporterUid,
                Coordinates = coordinates,
                HorizontalAlignment = HAlignment.Right,
                SetWidth = 200f,
            };

            rightBox.AddChild(locateButton);


            // Link\Unlink button
            var buttonLoc = "teleporter-console-user-interface-start-connection";
            if (linked)
                buttonLoc = "teleporter-console-user-interface-cut-connection";
            if (!teleporter.Powered)
                buttonLoc = "teleporter-console-user-interface-no-power";

            var linkButton = new TeleporterButton()
            {
                Text = Loc.GetString(buttonLoc),
                TeleporterUid = teleporter.TeleporterUid,
                Coordinates = coordinates,
                HorizontalAlignment = HAlignment.Right,
                SetWidth = 200f,
                Disabled = !teleporter.Powered,
            };
            linkButton.OnButtonUp += _ =>
            {
                SendTeleporterLinkChangeAction?.Invoke(teleporter.TeleporterUid);
            };

            rightBox.AddChild(linkButton);


            //Add teleporter coordinates to the NavMap
            var blipColor = Color.Aqua;
            if (!teleporter.Powered)
                blipColor = Color.Gray;
            if (selected)
                blipColor = Color.Green;

            if (coordinates != null && NavMap.Visible && _ringTexture is not null && _ringFilledTexture is not null)
            {
                var blip = new NavMapBlip(
                    coordinates.Value,
                    linked ? _ringFilledTexture : _ringTexture,
                    blipColor,
                    false);
                NavMap.TrackedEntities.TryAdd(teleporter.TeleporterUid, blip);

                locateButton.OnButtonUp += _ =>
                {
                    if (_trackedEntity == teleporter.TeleporterUid)
                        _trackedEntity = null;
                    else
                    {
                        _trackedEntity = teleporter.TeleporterUid;
                        NavMap.CenterToCoordinates(coordinates.Value);
                    }

                    UpdateTeleportersTable();
                };
            }

            //Add teleporters links lines
            if (teleporter.Coordinates is not null && teleporter.LinkCoordinates is not null)
            {
                var coordsOne = _entManager.GetCoordinates(teleporter.Coordinates);
                var coordTwo = _entManager.GetCoordinates(teleporter.LinkCoordinates);

                if (coordsOne is null || coordTwo is null)
                    return;

                var mapId1 = _xformSystem.GetMapId(coordsOne.Value);
                var mapId2 = _xformSystem.GetMapId(coordTwo.Value);

                if (mapId1 != mapId2)
                    return;

                if (mapId1 == MapId.Nullspace || mapId2 == MapId.Nullspace)
                    return;

                NavMap.LinkedTeleportersCoordinates.Add((
                    _xformSystem.ToMapCoordinates(coordsOne.Value).Position,
                    _xformSystem.ToMapCoordinates(coordTwo.Value).Position));
            }
        }
    }

    private void ClickTeleporterOnNavMap(NetEntity? netEntity)
    {
        SendTeleporterLinkChangeAction?.Invoke(netEntity);
    }

    private void ClearOutDatedData()
    {
        TeleportersTable.RemoveAllChildren();
        NavMap.TrackedCoordinates.Clear();
        NavMap.TrackedEntities.Clear();
        NavMap.LinkedTeleportersCoordinates.Clear();
    }

    private void UpdateTeleportersTable()
    {
        foreach (var teleporter in TeleportersTable.Children)
        {
            if (teleporter is not TeleporterButton)
                continue;

            var castTeleporter = (TeleporterButton)teleporter;

            if (castTeleporter?.Coordinates == null)
                continue;

            if (NavMap.TrackedEntities.TryGetValue(castTeleporter.TeleporterUid, out var data))
            {
                data = new NavMapBlip(
                    data.Coordinates,
                    data.Texture,
                    Color.Aqua,
                    false);

                NavMap.TrackedEntities[castTeleporter.TeleporterUid] = data;
            }
        }
    }
}

public sealed class TeleporterButton : Button
{
    public int IndexInTable;
    public NetEntity TeleporterUid;
    public EntityCoordinates? Coordinates;
}
